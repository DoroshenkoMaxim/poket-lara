<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Http\JsonResponse;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Auth;
use App\Services\AffiliateService;
use App\Services\TelegramBotService;
use App\Models\User;

class PostbackController extends Controller
{
    protected AffiliateService $affiliateService;
    protected TelegramBotService $telegramBot;

    public function __construct(AffiliateService $affiliateService, TelegramBotService $telegramBot)
    {
        $this->affiliateService = $affiliateService;
        $this->telegramBot = $telegramBot;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç–±–µ–∫ –æ—Ç PocketOption
     */
    public function handlePostback(Request $request): JsonResponse
    {
        try {
            // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
            $logData = [
                'method' => $request->method(),
                'headers' => $request->headers->all(),
                'get' => $request->query->all(),
                'post' => $request->all(),
                'query_string' => $request->getQueryString(),
                'timestamp' => now()->toDateTimeString()
            ];
            
            Log::info('Postback received', $logData);
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ GET –∑–∞–ø—Ä–æ—Å–∞
            $data = [
                'click_id' => $request->get('click_id'),
                'trader_id' => $request->get('trader_id'),
                'country' => $request->get('country'),
                'promo' => $request->get('promo') ?? $request->get('code'),
                'device_type' => $request->get('device_type'),
                'os_version' => $request->get('os_version'),
                'browser' => $request->get('browser'),
                'link_type' => $request->get('link_type'),
                'date_time' => $request->get('date_time'),
                'site_id' => $request->get('site_id'),
                'sub_id1' => $request->get('sub_id1'),
                'cid' => $request->get('cid'),
            ];

            $event = $request->get('event', 'reg'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            if (!$data['click_id'] || !$data['trader_id']) {
                return response()->json([
                    'error' => 'click_id and trader_id are required'
                ], 400);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            if ($event !== 'reg') {
                return response()->json([
                    'success' => true,
                    'message' => 'Event received but not processed'
                ]);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å—Ç–±–µ–∫
            $result = $this->affiliateService->processPostback($data);
            
            // –°–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –µ–≥–æ
            $user = $this->createAndLoginUser($result['telegram_id']);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã (–ø—Ä–æ—Å—Ç–æ –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            $signalsUrl = url('/');
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            $notificationSent = $this->sendRegistrationNotification(
                $result['telegram_id'], 
                $signalsUrl
            );

            Log::info('Postback processed successfully', [
                'click_id' => $data['click_id'],
                'trader_id' => $data['trader_id'],
                'telegram_id' => $result['telegram_id'],
                'user_id' => $user->id,
                'notification_sent' => $notificationSent,
                'signals_url' => $signalsUrl
            ]);

            return response()->json([
                'success' => true,
                'message' => 'Registration processed successfully',
                'click_id' => $data['click_id'],
                'trader_id' => $data['trader_id'],
                'telegram_id' => $result['telegram_id'],
                'user_id' => $user->id,
                'signals_url' => $signalsUrl,
                'notification_sent' => $notificationSent
            ]);

        } catch (\InvalidArgumentException $e) {
            Log::warning('Invalid postback data', [
                'error' => $e->getMessage(),
                'data' => $request->all()
            ]);
            
            return response()->json([
                'error' => $e->getMessage()
            ], 400);
            
        } catch (\Exception $e) {
            Log::error('Postback processing error', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'data' => $request->all()
            ]);
            
            if ($e->getMessage() === 'click_id not found in our system') {
                return response()->json([
                    'error' => 'click_id not found in our system'
                ], 404);
            }
            
            if ($e->getMessage() === 'Registration already processed') {
                return response()->json([
                    'success' => true,
                    'message' => 'Registration already processed'
                ]);
            }
            
            return response()->json([
                'error' => 'Internal server error: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –µ–≥–æ
     */
    private function createAndLoginUser(int $telegramId): User
    {
        // –°–æ–∑–¥–∞–µ–º/–Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        $user = User::firstOrCreate(
            ['telegram_id' => $telegramId],
            [
                'name' => 'Telegram User ' . $telegramId,
                'email' => 'telegram_' . $telegramId . '@example.com',
                'password' => \Illuminate\Support\Facades\Hash::make(\Illuminate\Support\Str::random(32)),
            ]
        );

        Log::info('User created/found for postback', [
            'user_id' => $user->id,
            'telegram_id' => $telegramId,
            'was_created' => $user->wasRecentlyCreated
        ]);

        return $user;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    private function sendRegistrationNotification(int $telegramId, string $signalsUrl): bool
    {
        $message = "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!</b>\n\n";
        $message .= "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç PocketOption –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n";
        $message .= "üéØ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º!\n\n";
        $message .= "üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:\n";
        $message .= $signalsUrl . "\n\n";
        $message .= "üí∞ –£–¥–∞—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!";

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        $keyboard = $this->telegramBot->createInlineKeyboard([
            [
                ['text' => 'üìä –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–∏–≥–Ω–∞–ª–∞–º', 'url' => $signalsUrl]
            ],
            [
                ['text' => 'ü§ñ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞', 'url' => 'https://t.me/' . config('services.telegram.bot_username')]
            ]
        ]);

        try {
            $result = $this->telegramBot->sendMessage(
                $telegramId,
                $message,
                $keyboard
            );

            return $result && $result['ok'];
        } catch (\Exception $e) {
            Log::error('Failed to send registration notification', [
                'telegram_id' => $telegramId,
                'error' => $e->getMessage()
            ]);
            return false;
        }
    }
} 