<?php

namespace App\Services;

use App\Models\AffiliateLink;
use App\Models\Registration;
use App\Models\TempToken;
use App\Models\NotificationQueue;

class AffiliateService
{
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public function generateAffiliateLink(int $telegramId): array
    {
        $affiliateLink = AffiliateLink::createLink($telegramId);
        
        // –ë–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ PocketOption
        $baseUrl = 'https://u3.shortink.io/register';
        $params = [
            'utm_campaign' => '822453',
            'utm_source' => 'affiliate',
            'utm_medium' => 'sr',
            'a' => 'uCOb8WaCjMsC2U',
            'ac' => 'test',
            'code' => 'WELCOME50',
            'click_id' => $affiliateLink->click_id,
            'site_id' => 'telegram_bot'
        ];
        
        $url = $baseUrl . '?' . http_build_query($params);
        
        return [
            'click_id' => $affiliateLink->click_id,
            'affiliate_link' => $url,
            'telegram_id' => $telegramId
        ];
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ—Å—Ç–±–µ–∫ –æ—Ç PocketOption
     */
    public function processPostback(array $data): array
    {
        $clickId = $data['click_id'] ?? null;
        $traderId = $data['trader_id'] ?? null;

        if (!$clickId || !$traderId) {
            throw new \InvalidArgumentException('click_id and trader_id are required');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π click_id
        $affiliateLink = AffiliateLink::findByClickId($clickId);
        if (!$affiliateLink) {
            throw new \Exception('click_id not found in our system');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —ç—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        $existingRegistration = Registration::findByIds($clickId, $traderId);
        if ($existingRegistration) {
            throw new \Exception('Registration already processed');
        }

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        $registration = Registration::create([
            'click_id' => $clickId,
            'trader_id' => $traderId,
            'country' => $data['country'] ?? null,
            'promo' => $data['promo'] ?? $data['code'] ?? null,
            'device_type' => $data['device_type'] ?? null,
            'os_version' => $data['os_version'] ?? null,
            'browser' => $data['browser'] ?? null,
            'link_type' => $data['link_type'] ?? null,
            'site_id' => $data['site_id'] ?? null,
            'sub_id1' => $data['sub_id1'] ?? null,
            'cid' => $data['cid'] ?? null,
            'date_time' => $data['date_time'] ?? null,
        ]);

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        $tempToken = TempToken::createToken(
            $affiliateLink->telegram_id,
            $clickId,
            $traderId
        );

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∏–≥–Ω–∞–ª—ã
        $signalsUrl = url("/signals?token=" . $tempToken->token);

        return [
            'registration' => $registration,
            'temp_token' => $tempToken,
            'signals_url' => $signalsUrl,
            'telegram_id' => $affiliateLink->telegram_id
        ];
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
     */
    public function sendRegistrationNotification(array $postbackData): bool
    {
        $telegramBotService = app(TelegramBotService::class);
        
        $message = "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!</b>\n\n";
        $message .= "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç PocketOption –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n";
        $message .= "üéØ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º!\n\n";
        $message .= "üîó –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–∏–≥–Ω–∞–ª–æ–≤:\n";
        $message .= $postbackData['signals_url'] . "\n\n";
        $message .= "‚è∞ –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ 24 —á–∞—Å–∞\n";
        $message .= "üí∞ –£–¥–∞—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏!";

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        $keyboard = $telegramBotService->createInlineKeyboard([
            [
                ['text' => 'üìä –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–∏–≥–Ω–∞–ª–∞–º', 'url' => $postbackData['signals_url']]
            ],
            [
                ['text' => 'ü§ñ –û—Ç–∫—Ä—ã—Ç—å –±–æ—Ç–∞', 'url' => 'https://t.me/' . config('services.telegram.bot_username')]
            ]
        ]);

        try {
            $result = $telegramBotService->sendMessage(
                $postbackData['telegram_id'],
                $message,
                $keyboard
            );

            if ($result && $result['ok']) {
                return true;
            } else {
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∫–∞–∫ fallback
                NotificationQueue::addNotification(
                    $postbackData['telegram_id'],
                    $message,
                    $postbackData
                );
                return false;
            }
        } catch (\Exception $e) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            NotificationQueue::addNotification(
                $postbackData['telegram_id'],
                $message,
                $postbackData
            );
            return false;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏–≥–Ω–∞–ª–∞–º
     */
    public function validateSignalsAccess(string $token = null, string $clickId = null, string $traderId = null): ?array
    {
        // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
        if ($token) {
            $tempToken = TempToken::validateToken($token);
            if ($tempToken) {
                return [
                    'access_granted' => true,
                    'method' => 'token',
                    'telegram_id' => $tempToken->telegram_id,
                    'click_id' => $tempToken->click_id,
                    'trader_id' => $tempToken->trader_id,
                    'expires_at' => $tempToken->expires_at,
                ];
            }
        }

        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–æ—à–µ–ª, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if ($clickId && $traderId) {
            $registrationData = Registration::getWithTelegram($clickId, $traderId);
            if ($registrationData) {
                return [
                    'access_granted' => true,
                    'method' => 'direct',
                    'telegram_id' => $registrationData['telegram_id'],
                    'click_id' => $clickId,
                    'trader_id' => $traderId,
                ];
            }
        }

        return [
            'access_granted' => false,
            'method' => null,
        ];
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è Laravel
     */
    public function createAuthenticatedLink(int $telegramId): string
    {
        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        $user = \App\Models\User::firstOrCreate(
            ['telegram_id' => $telegramId],
            [
                'name' => 'Telegram User ' . $telegramId,
                'email' => null,
                'password' => \Illuminate\Support\Facades\Hash::make(\Illuminate\Support\Str::random(32)),
            ]
        );

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        $token = $user->createToken('telegram_auth')->plainTextToken;
        
        return url("/auto-login?token=" . $token);
    }
} 