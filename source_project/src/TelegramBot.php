<?php

namespace App;

class TelegramBot
{
    private const API_URL = 'https://api.telegram.org/bot';
    private string $token;
    
    public function __construct(string $token)
    {
        $this->token = $token;
    }
    
    public function sendMessage(int $chatId, string $text, array $keyboard = null): ?array
    {
        $data = [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML'
        ];
        
        if ($keyboard) {
            $data['reply_markup'] = json_encode($keyboard);
        }
        
        return $this->makeRequest('sendMessage', $data);
    }
    
    public function setWebhook(string $url): ?array
    {
        return $this->makeRequest('setWebhook', ['url' => $url]);
    }
    
    public function deleteWebhook(): ?array
    {
        return $this->makeRequest('deleteWebhook');
    }
    
    public function getMe(): ?array
    {
        return $this->makeRequest('getMe');
    }
    
    public function answerCallbackQuery(string $callbackQueryId, string $text = '', bool $showAlert = false): ?array
    {
        return $this->makeRequest('answerCallbackQuery', [
            'callback_query_id' => $callbackQueryId,
            'text' => $text,
            'show_alert' => $showAlert
        ]);
    }
    
    private function makeRequest(string $method, array $data = []): ?array
    {
        $url = self::API_URL . $this->token . '/' . $method;
        
        $options = [
            'http' => [
                'header' => "Content-type: application/x-www-form-urlencoded\r\n",
                'method' => 'POST',
                'content' => http_build_query($data)
            ]
        ];
        
        $context = stream_context_create($options);
        $result = file_get_contents($url, false, $context);
        
        if ($result === false) {
            return null;
        }
        
        return json_decode($result, true);
    }
    
    public function processUpdate(array $update): void
    {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        if (isset($update['message'])) {
            $this->processMessage($update['message']);
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback queries
        if (isset($update['callback_query'])) {
            $this->processCallbackQuery($update['callback_query']);
        }
    }
    
    private function processMessage(array $message): void
    {
        $chatId = $message['chat']['id'];
        $text = $message['text'] ?? '';
        $userId = $message['from']['id'];
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        $this->logMessage($message);
        
        switch ($text) {
            case '/start':
                $this->handleStartCommand($chatId, $userId);
                break;
                
            default:
                $this->sendMessage($chatId, 
                    "ü§ñ –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–æ–π —Å—Å—ã–ª–∫–∏ PocketOption.");
                break;
        }
    }
    
    private function handleStartCommand(int $chatId, int $userId): void
    {
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫—É—é —Å—Å—ã–ª–∫—É
            $response = $this->generateAffiliateLink($userId);
            
            if ($response && isset($response['affiliate_link'])) {
                $message = "üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PocketOption!</b>\n\n";
                $message .= "üîó –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è —Å—Å—ã–ª–∫–∞:\n";
                $message .= "<code>" . $response['affiliate_link'] . "</code>\n\n";
                $message .= "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n";
                $message .= "1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –≤—ã—à–µ\n";
                $message .= "2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ PocketOption\n";
                $message .= "3. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ç–æ—Ä–≥–æ–≤—ã–º —Å–∏–≥–Ω–∞–ª–∞–º\n\n";
                $message .= "üí∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: <b>WELCOME50</b>\n";
                $message .= "üéÅ –ü–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å 50% –∫ –¥–µ–ø–æ–∑–∏—Ç—É!";
                
                $keyboard = [
                    'inline_keyboard' => [
                        [
                            ['text' => 'üöÄ –û—Ç–∫—Ä—ã—Ç—å PocketOption', 'url' => $response['affiliate_link']]
                        ]
                    ]
                ];
                
                $this->sendMessage($chatId, $message, $keyboard);
            } else {
                $this->sendMessage($chatId, 
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        } catch (Exception $e) {
            $this->sendMessage($chatId, 
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            error_log('Telegram bot error: ' . $e->getMessage());
        }
    }
    
    private function generateAffiliateLink(int $telegramId): ?array
    {
        $url = "https://" . $_SERVER['HTTP_HOST'] . "/generate_link.php?telegram_id=" . $telegramId . "&format=json";
        
        $response = file_get_contents($url);
        if ($response === false) {
            return null;
        }
        
        return json_decode($response, true);
    }
    
    private function processCallbackQuery(array $callbackQuery): void
    {
        $chatId = $callbackQuery['message']['chat']['id'];
        $data = $callbackQuery['data'] ?? '';
        $callbackQueryId = $callbackQuery['id'];
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
        $this->answerCallbackQuery($callbackQueryId, '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ!');
    }
    
    private function logMessage(array $message): void
    {
        $logData = [
            'timestamp' => date('Y-m-d H:i:s'),
            'user_id' => $message['from']['id'],
            'chat_id' => $message['chat']['id'],
            'text' => $message['text'] ?? '',
            'username' => $message['from']['username'] ?? null,
            'first_name' => $message['from']['first_name'] ?? null
        ];
        
        file_put_contents(__DIR__ . '/../logs/telegram.log', 
            json_encode($logData) . "\n", FILE_APPEND | LOCK_EX);
    }
    
    public function sendNotificationToUser(int $telegramId, string $message): bool
    {
        $result = $this->sendMessage($telegramId, $message);
        return $result !== null && $result['ok'] === true;
    }
} 